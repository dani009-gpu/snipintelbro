"""SPIDER INTEL - BACKEND COMPLET AVEC RECHERCHE DE PERSONNALIT√âS"""
from fastapi import FastAPI, Depends, HTTPException
from fastapi.security import HTTPBearer
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import sqlite3, shodan, requests, os, wikipedia
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
import jwt, datetime
from io import BytesIO

# ================= CONFIG =================
app = FastAPI()

# Middleware CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

security = HTTPBearer()
SECRET_KEY = "ff986a98-0dfc-4492-9393-ca1a75cd26c2"
DB_NAME = "spiderintel.db"

# ================= MOD√àLES =================
class Target(BaseModel):
    type: str  # "email", "ip", "domain", "celebrity"
    value: str

# ================= BASE DE DONN√âES =================
def init_db():
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS targets (
                id INTEGER PRIMARY KEY,
                type TEXT,
                value TEXT UNIQUE,
                result TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.commit()

# ================= UTILS OSINT =================
def scan_email(email: str):
    return {
        "status": "danger",
        "leaks": ["Adobe", "LinkedIn"],
        "is_disposable": False,
        "is_valid": True
    }

def scan_ip(ip: str):
    try:
        api = shodan.Shodan("b60fae6f92274daca86121eaf2656737")
        return api.host(ip)
    except:
        return {
            "ip": ip,
            "country": "France",
            "city": "Paris",
            "status": "warning"
        }

def scan_celebrity(name: str):
    """Nouvelle fonction pour les c√©l√©brit√©s avec Wikipedia et images"""
    try:
        # Configuration Wikipedia
        wikipedia.set_lang("fr")
        
        # R√©cup√©ration des donn√©es
        page = wikipedia.page(name, auto_suggest=True)
        summary = wikipedia.summary(name, sentences=3)
        
        # R√©cup√©ration d'une image (premier r√©sultat Google)
        img_url = None
        try:
            search_url = f"https://www.google.com/search?tbm=isch&q={name}"
            headers = {"User-Agent": "Mozilla/5.0"}
            response = requests.get(search_url, headers=headers)
            # Parsing simplifi√© pour r√©cup√©rer une image
            img_url = "https://via.placeholder.com/300?text=Image+non+disponible"
        except:
            pass
            
        return {
            "name": name,
            "summary": summary,
            "url": page.url,
            "image": img_url,
            "categories": page.categories[:5],
            "status": "found"
        }
    except wikipedia.exceptions.PageError:
        return {"status": "not_found", "name": name}
    except Exception as e:
        return {"status": "error", "error": str(e)}

# ================= G√âN√âRATION PDF =================
def generate_pdf(target: Target, result: dict):
    try:
        if not os.path.exists('reports'):
            os.makedirs('reports')
        
        filename = f"{target.type}_{target.value.replace(' ', '_')[:50]}.pdf"
        pdf_path = os.path.join("reports", filename)
        
        c = canvas.Canvas(pdf_path, pagesize=letter)
        
        # En-t√™te
        c.setFont("Helvetica-Bold", 16)
        c.drawString(72, 750, f"Rapport OSINT - {target.type.upper()}")
        c.drawString(72, 730, f"Cible: {target.value}")
        
        # Image pour les c√©l√©brit√©s
        if target.type == "celebrity" and result.get("image"):
            try:
                img_data = requests.get(result["image"]).content
                img = ImageReader(BytesIO(img_data))
                c.drawImage(img, 72, 550, width=100, height=100)
                y_position = 500
            except:
                y_position = 700
        else:
            y_position = 700
        
        # Contenu
        c.setFont("Helvetica", 12)
        for key, value in result.items():
            if key == "image":
                continue
                
            if y_position < 50:
                c.showPage()
                y_position = 750
                
            text = f"{key}: {str(value)[:200]}"  # Limite de longueur
            c.drawString(72, y_position, text)
            y_position -= 20
        
        c.save()
        return pdf_path
    except Exception as e:
        print(f"Erreur g√©n√©ration PDF: {e}")
        return None

# ================= ROUTES =================
@app.post("/scan")
async def scan(target: Target):
    try:
        # Log de d√©bogage
        print(f"üîç Requ√™te re√ßue - Type: {target.type}, Valeur: {target.value}")
        
        # Simulation r√©ussie pour tous les types
        result = {
            "email": {
                "status": "success",
                "message": "Email analys√©",
                "data": {"leaks": ["Adobe"]}
            },
            "ip": {
                "status": "success",
                "message": "IP analys√©e",
                "data": {"country": "France"}
            },
            "domain": {
                "status": "success", 
                "message": "Domaine analys√©",
                "data": {"registrar": "OVH"}
            },
            "celebrity": {
                "status": "success",
                "message": "C√©l√©brit√© trouv√©e",
                "data": {"name": target.value}
            }
        }.get(target.type.lower(), {"status": "error", "message": "Type inconnu"})
        
        return {
            "status": "success",
            "target": target,
            "result": result,
            "pdf_url": f"/reports/simulation.pdf"  # Chemin simul√©
        }
        
    except Exception as e:
        print(f"üî• ERREUR: {str(e)}")  # Log l'erreur compl√®te
        raise HTTPException(500, f"Erreur simplifi√©e: {str(e)}")
        # Sauvegarde en DB
        with sqlite3.connect(DB_NAME) as conn:
            conn.execute(
                "INSERT OR REPLACE INTO targets (type, value, result) VALUES (?, ?, ?)",
                (target.type, target.value, str(result))
            )
            conn.commit()
        
        # G√©n√©ration PDF
        pdf_path = generate_pdf(target, result)
        if not pdf_path:
            raise HTTPException(500, "Erreur g√©n√©ration PDF")
        
        return {
            "status": "success",
            "target": target,
            "result": result,
            "pdf_url": f"/{pdf_path}"
        }
        
    except Exception as e:
        raise HTTPException(500, f"Erreur serveur: {str(e)}")

# ================= LANCEMENT =================
if __name__ == "__main__":
    init_db()
    import uvicorn
    uvicorn.run(
        "backend:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="debug"
    )